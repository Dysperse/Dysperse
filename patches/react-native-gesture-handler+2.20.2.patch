diff --git a/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx b/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx
index 5708e30..a49d406 100644
--- a/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx
+++ b/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx
@@ -6,35 +6,35 @@
 // and fix issues that may arise in gesture handler library that could be found
 // when using the drawer component
 
+import invariant from 'invariant';
 import * as React from 'react';
 import { Component } from 'react';
-import invariant from 'invariant';
 import {
   Animated,
-  StyleSheet,
-  View,
+  I18nManager,
   Keyboard,
+  LayoutChangeEvent,
+  NativeSyntheticEvent,
   StatusBar,
-  I18nManager,
   StatusBarAnimation,
   StyleProp,
+  StyleSheet,
+  View,
   ViewStyle,
-  LayoutChangeEvent,
-  NativeSyntheticEvent,
 } from 'react-native';
 
 import {
+  ActiveCursor,
   GestureEvent,
   HandlerStateChangeEvent,
-  UserSelect,
-  ActiveCursor,
   MouseButton,
+  UserSelect,
 } from '../handlers/gestureHandlerCommon';
-import { PanGestureHandler } from '../handlers/PanGestureHandler';
 import type {
   PanGestureHandlerEventPayload,
   TapGestureHandlerEventPayload,
 } from '../handlers/GestureHandlerEventPayload';
+import { PanGestureHandler } from '../handlers/PanGestureHandler';
 import { TapGestureHandler } from '../handlers/TapGestureHandler';
 import { State } from '../State';
 
@@ -220,7 +220,7 @@ export default class DrawerLayout extends Component<
 
     const dragX = new Animated.Value(0);
     const touchX = new Animated.Value(0);
-    const drawerTranslation = new Animated.Value(0);
+    const drawerTranslation = new Animated.Value(props.defaultDrawerOpen ? props.drawerWidth! : 0);
 
     this.state = {
       dragX,
@@ -228,7 +228,7 @@ export default class DrawerLayout extends Component<
       drawerTranslation,
       containerWidth: 0,
       drawerState: IDLE,
-      drawerOpened: false,
+      drawerOpened: Boolean(props.defaultDrawerOpen),
     };
 
     this.updateAnimatedEvent(props, this.state);
